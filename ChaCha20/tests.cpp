#include "ChaCha20.cpp"
#include <iostream>
#include <vector>
#include <string>

// 2.1.1.Test Vector for the ChaCha Quarter Round
bool QuarterRoundTest()
{
    uint32 a = 0x11111111;
    uint32 b = 0x01020304;
    uint32 c = 0x9b8d6f43;
    uint32 d = 0x01234567;

    QuarterRound(a, b, c, d);

    return a == 0xea2a92f4 && b == 0xcb1cf8ce && c == 0x4581472e && d == 0x5881c4bb;
}

// 2.2.1.  Test Vector for the Quarter Round on the ChaCha State
bool QuarterRoundStateTest()
{
    std::vector<uint32> state = {
        0x879531e0, 0xc5ecf37d, 0x516461b1, 0xc9a62f8a,
        0x44c20ef3, 0x3390af7f, 0xd9fc690b, 0x2a5f714c,
        0x53372767, 0xb00a5631, 0x974c541a, 0x359e9963,
        0x5c971061, 0x3d631689, 0x2098d9d6, 0x91dbd320
    };

    QuarterRoundState(state, 2, 7, 8, 13);

    return state[2] == 0xbdb886dc && state[7] == 0xcfacafd2 && state[8] == 0xe46bea80 && state[13] == 0xccc07c79;
}

// 2.3.2.Test Vector for the ChaCha20 Block Function
bool ChaCha20BlockTest() {
    std::vector<uint8_t> key8bit = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
    std::vector<uint8_t> nonce8bit = { 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00 };
    uint32 blockCount = 1;

    std::vector<uint32> key32bit = to32bit(key8bit);
    std::vector<uint32> nonce32bit = to32bit(nonce8bit);

    std::vector<uint32> state = to32bit(ChaCha20Block(key32bit, nonce32bit, blockCount));
    std::vector<uint32> test_state = { 0x10f1e7e4, 0xd13b5915, 0x500fdd1f, 0xa32071c4, 0xc7d1f4c7, 0x33c06803, 0x0422aa9a, 0xc3d46c4e, 0xd2826446, 0x079faa09, 0x14c2d705, 0xd98b02a2, 0xb5129cd1, 0xde164eb9, 0xcbd083e8, 0xa2503c4e };

    bool result = true;
    for (int i = 0; i < state.size(); i++)
    {
        result = result && (state[i] == test_state[i]);
    }

    return result;
}

// 2.4.2.  Example and Test Vector for the ChaCha20 Cipher
bool ChaCha20EncryptTest()
{
    std::vector<uint32> key = { 0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f };
    std::vector<uint32> nonce = { 0x00000000, 0x0000004a, 0x00000000 };
    uint32 counter = 1;
    std::vector<uint8> plaintext = { 0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e };
    std::vector<uint8> ciphertext = { 0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81, 0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b, 0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57, 0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8, 0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e, 0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36, 0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42, 0x87, 0x4d };

    std::vector<uint8> encrypted = ChaCha20Encrypt(to32bit(serialize(key)), counter, to32bit(serialize(nonce)), plaintext);
    std::vector<uint8> decrypted = ChaCha20Decrypt(to32bit(serialize(key)), counter, to32bit(serialize(nonce)), encrypted);

    bool result = true;
    for (int i = 0; i < encrypted.size(); i++)
    {
        result = result && (encrypted[i] == ciphertext[i]);
    }

    return result;
}

int main()
{
    bool quarterTest = QuarterRoundTest();
    bool quarterStateTest = QuarterRoundStateTest();
    bool blockTest = ChaCha20BlockTest();
    bool encryptTest = ChaCha20EncryptTest();

    std::cout << "QuarterRoundTest: " << (quarterTest ? "Passed" : "Failed") << std::endl;
    std::cout << "QuarterRoundStateTest: " << (quarterStateTest ? "Passed" : "Failed") << std::endl;
    std::cout << "ChaCha20BlockTest: " << (blockTest ? "Passed" : "Failed") << std::endl;
    std::cout << "ChaCha20EncryptTest: " << (encryptTest ? "Passed" : "Failed") << std::endl;

    bool result = quarterTest && quarterStateTest && blockTest && encryptTest;
    std::cout << "\nTest Status: " << (result ? "Passed" : "Failed") << std::endl;

    return 1;
}